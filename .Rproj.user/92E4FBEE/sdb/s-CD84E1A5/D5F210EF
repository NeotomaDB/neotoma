{
    "contents" : "\n#' Function to return full dataset records.\n#' \n#' Using the dataset ID, return all records associated with the data.  At present, \n#'    only returns the dataset in an unparsed format, not as a data table.   This function will only download one dataset at a time.\n#' \n#' @import RJSONIO RCurl plyr\n#' @param datasetid A single numeric dataset ID, as returned by \\code{get_datasets}.\n#' @author Simon J. Goring \\email{simon.j.goring@@gmail.com}\n#' @return This command returns either a 'try-error' definined by the error returned \n#'    from the Neotoma API call, or a list comprising the following items:\n#'    \n#' \\itemize{\n#'  \\item{metadata}{A table describing the collection, including the dataset ID, dataset name, collection type, collection handle and dataset type.}\n#'  \\item{pi.data}{A list of PI data, compatable with \\code{get_contacts}.}\n#'  \\item{site.data}{Site information, compatable with \\code{get_sites}}\n#'  \\item{sample.meta}{Dataset information for the core, primarily the age-depth model and chronology.}\n#'  \\item{taxon.list}{The list of taxa contained within the dataset, unordered, including information that can be used in \\code{get_taxa}}\n#'  \\item{counts}{The assemblage data for the dataset, arranged with each successive depth in rows and the taxa as columns.  All taxa are described in \\code{taxon.list}, the chronology is in \\code{sample.data}}\n#' }\n#'    \n#'    A full data object containing all the relevant assemblage information and metadata neccessary to understand a site.\n#'    The data object is a list of lists and data.frames that describe an assemblage, the constituent taxa, the chronology, site and PIs who contributed the data.\n#' @examples \\dontrun{\n#' #  Search for sites with \"Thuja\" pollen that are older than 8kyr BP and\n#' #  that are on the west coast of North America:\n#' t8kyr.datasets <- get_datasets(taxonname='Thuja*', loc=c(-150, 20, -100, 60), ageyoung = 8000)\n#' \n#' #  Returns 3 records (as of 04/04/2013), get dataset for the first record, Gold Lake Bog.\n#' GOLDKBG <- get_download(t8kyr.datasets[[1]]$DatasetID)\n#' \n#' taxa.no <- nrow(GOLDKBG$taxon.list)\n#'\n#' #  Of the 60 taxa in the record, plot the pollen curve for Abies over time:\n#' \n#' pollen <- GOLDKBG$taxon.list$VariableElement == 'pollen'\n#' pol.curve <- data.frame(age = GOLDKBG$sample.meta$Age,\n#'                         Abies = GOLDKBG$counts[,'Abies'] / rowSums(GOLDKBG$counts[,pollen]))\n#' plot(Abies * 100 ~ age, data = pol.curve, type='b', \n#'      ylab = '% Abies', xlab='Calibrated Years BP', pch=19)\n#'\n#' }\n#' @references\n#' Neotoma Project Website: http://www.neotomadb.org\n#' API Reference:  http://api.neotomadb.org/doc/resources/contacts\n#' @keywords Neotoma Palaeoecology API\n#' @export \nget_download <- function(datasetid){\n  \n  #This needs work.\n  base.uri <- 'http://api.neotomadb.org/v1/data/downloads'\n  \n  cl <- as.list(match.call())\n  cl[[1]] <- NULL\n  cl <- lapply(cl, eval, envir=parent.frame())\n  \n  #  Parameter check on siteid:\n  if('datasetid' %in% names(cl)){\n    if(!is.numeric(datasetid)) stop('datasetid must be numeric.')\n  }\n  \n  aa <- try(fromJSON(paste(base.uri, '/', cl, sep=''), nullValue = NA))\n  \n  if(aa[[1]] == 0){\n    stop(paste('Server returned an error message:\\n', aa[[2]]), call.=FALSE)\n  }\n  if(aa[[1]] == 1){\n    aa <- aa[[2]]\n    cat('The API call was successful, you have returned ', length(aa), 'records.\\n')\n    \n    #  So here the goal is to reduce this list of lists to as simple a set of\n    #  matrices as possible.\n    if('Samples' %in% names(aa[[1]])){\n      meta.data <- with(aa[[1]], data.frame(dataset.id = DatasetID,\n                                            dataset.name = DatasetName,\n                                            collection.type = CollUnitType,\n                                            collection.handle = CollUnitHandle,\n                                            dataset.type = DatasetType))\n      site.data <- as.data.frame(aa[[1]]$Site)\n      site.data <- site.data[,c('SiteID', 'SiteName', 'Altitude',\n                                'LatitudeNorth', 'LongitudeWest', \n                                'LatitudeSouth', 'LongitudeEast',\n                                'SiteDescription', 'SiteNotes')]\n      \n      pi.data <- aa[[1]]$DatasetPIs\n      \n      #  This is the part I'm less sure about doing nicely:\n      samples <- aa[[1]]$Samples\n      sample.meta <- data.frame(depths = sapply(samples, function(x) x$AnalysisUnitDepth),\n                                thickness = sapply(samples, function(x) x$AnalysisUnitName),\n                                ldply(samples, function(x) data.frame(x$SampleAges)),\n                                IDs = sapply(samples, function(x) x$SampleID),\n                                sample.name = sapply(samples, function(x) {\n                                  if(is.null(x$SampleUnitName)) NA\n                                  else x$SampleUnitName}),\n                                unit.name = sapply(samples, function(x) x$AnalysisUnitName))\n    \n      sample.data <- suppressMessages(melt(llply(samples, function(x) ldply(x$SampleData, data.frame))))\n      taxon.list <- sample.data[!duplicated(sample.data[,1]),1:5]\n      \n      count.table <- xtabs(value ~ L1 + TaxonName, sample.data)\n      \n      aa <- list(metadata = meta.data,\n                 pi.data = pi.data,\n                 site.data = site.data,\n                 sample.meta = sample.meta,\n                 taxon.list = taxon.list,\n                 counts = count.table)\n    }\n  }\n  \n  if(class(aa) == 'try-error') aa <- aa\n  \n  aa\n  \n}\n",
    "created" : 1371006545965.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "706468601",
    "id" : "D5F210EF",
    "lastKnownWriteTime" : 1371006569,
    "path" : "~/GitHub/neotoma/R/get_download.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}