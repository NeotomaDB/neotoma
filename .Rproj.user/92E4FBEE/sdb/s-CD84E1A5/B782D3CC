{
    "contents" : "\n#' A function to obtain contact information for data contributors from the Neotoma \n#'    Paleoecological Database.\n#' \n#' @import RJSONIO RCurl plyr\n#' @param contactid Contact ID is a numerical value associated with the Neotoma \n#'    Contact table's numerical Contact ID.\n#' @param contactname A character string indicating the data contributors' project, \n#'    organization or personal name.  May be a partial string and can include wildcards. \n#' @param contactstatus The current status of the contact.  Possible values include: \n#'    active, deceased, defunct, extant, inactive, retired, unknown.\n#' @param familyname A character string.  Full or partial string indicating the \n#'    contact's last name.\n#' @author Simon J. Goring \\email{simon.j.goring@@gmail.com}\n#' @return The function takes parameters defined by the user and returns a list \n#'    of contact information supplied by the Neotoma Paleoecological Database.  \n#'    The user may define all or none of the possible fields.  The function contains \n#'    data chacks for each defined parameter.\n#'    \n#'    The function returns either a single item of class \"try-error\" describing \n#'    the reason for failure (either mis-defined parameters or an error from the Neotoma API), \n#'    or a table of contacts, with rows corresponding to the number of individual \n#'    contacts returned by the Neotoma API.  Each row entry includes the following parameters:\n#'    \n#' \\itemize{\n#'  \\item{ContactID}{  Unique database record identifier for the contact.}\n#'  \\item{AliasID}{  The ContactID of a person's current name. If the AliasID is different from the ContactID, the ContactID refers to the person's former name.}\n#'  \\item{ContactName}{  Full name of the person, last name first (e.g. \"Simpson, George Gaylord\") or name of organization or project (e.g. \"Great Plains Flora Association\").}\n#'  \\item{ContactStatus}{  Current status of the person, organization, or project. Field links to the ContactStatuses lookup table.}\n#'  \\item{FamilyName}{  Family or surname name of a person.}\n#'  \\item{LeadingInitials}{  Leading initials for given or forenames without spaces (e.g. \"G.G.\").}\n#'  \\item{GivenNames}{  Given or forenames of a person (e.g. \"George Gaylord\"). Initials with spaces are used if full given names are not known (e.g. \"G. G\").}\n#'  \\item{Suffix}{  Suffix of a person's name (e.g. \"Jr.\", \"III\").}\n#'  \\item{Title}{  A personâ€™s title (e.g. \"Dr.\", \"Prof.\", \"Prof. Dr\").}\n#'  \\item{Phone}{  Telephone number.}\n#'  \\item{Fax}{  Fax number.}\n#'  \\item{Email}{  Email address.}\n#'  \\item{URL}{  Universal Resource Locator, an Internet World Wide Web address.}\n#'  \\item{Address}{  Full mailing address.}\n#'  \\item{Notes}{  Free form notes or comments about the person, organization, or project.}\n#' }\n#' @examples \\dontrun{\n#' #  To find all data contributors who are active:\n#' active.cont <- get_contacts(contactstatus = 'active')\n#' \n#' # To find all data contributors who have the last name \"Smith\"\n#' smith.cont <- get_contacts(familyname = 'Smith')\n#' }\n#' @references\n#' Neotoma Project Website: http://www.neotomadb.org\n#' API Reference:  http://api.neotomadb.org/doc/resources/contacts\n#' @keywords Neotoma Palaeoecology API\n#' @export \nget_contacts <- function(contactid, contactname, contactstatus, familyname){\n  \n  base.uri <- 'http://api.neotomadb.org/v1/data/contacts'\n  \n  cl <- as.list(match.call())\n  cl[[1]] <- NULL\n  cl <- lapply(cl, eval, envir=parent.frame())\n  \n  #  Parameter check on contactid:\n  if('contactid' %in% names(cl)){\n    if(!is.numeric(cl$contactid)){\n      stop('The contactid must be numeric.')\n    }\n  }\n  \n  #  Parameter check on contactname:\n  if('contactname' %in% names(cl)){\n    if(!is.character(cl$contactname)){\n      stop('The contactname must be a character string.')\n    }\n  }\n  \n  #  Parameter check on contactstatus:\n  if('contactstatus' %in% names(cl)){\n    if(!is.character(cl$contactstatus)){\n      stop('The contactstatus must be a character string.')\n    }\n    else{\n      if(!cl$contactstatus %in% c('active', 'deceased', 'defunct',\n                                  'extant', 'inactive', 'retired', 'unknown')){\n        stop('status must be an accepted term.  Use get.table(\\'ContactStatues\\')')\n      }\n    }\n  }\n  \n  #  Parameter check on familyname:\n  if('familyname' %in% names(cl)){\n    if(!is.character(cl$familyname)){\n      stop('The familyname must be a character string.')\n    }\n  }\n  \n  aa <- try(fromJSON(getForm(base.uri, .params = cl), nullValue = NA))\n  \n  if(aa[[1]] == 0){\n    stop(paste('Server returned an error message:\\n', aa[[2]]), call.=FALSE)\n  }\n  if(aa[[1]] == 1){\n    aa <- aa[[2]]\n    cat('The API call was successful, you have returned ', length(aa), 'records.\\n')\n  }\n  \n  if(class(aa) == 'try-error') output <- neotoma.form\n  else{\n    names(aa) <- sapply(aa, function(x)x$ContactID)\n    output <- suppressMessages(cast(melt(lapply(aa, data.frame)))[,-2])\n  }\n  \n  output  \n}",
    "created" : 1371006121165.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1460335856",
    "id" : "B782D3CC",
    "lastKnownWriteTime" : 1371006158,
    "path" : "~/GitHub/neotoma/R/get_contacts.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}