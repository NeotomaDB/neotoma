{
    "contents" : "#  British Columbia vegetation stability:\n#  Open the vegetation data:\nlibrary(plyr)\nlibrary(mgcv)\nlibrary(rgdal)\nlibrary(vegan)\nlibrary(raster)\nlibrary(gstat)\nlibrary(nlme)\nlibrary(ggplot2)\n\n#  Set the home folder and load the required files using an ifelse statement to\n#  ensure that we can detect which computer I'm using.\nifelse(.Platform$OS.type == 'unix', \n       setwd('/home/simon/Dropbox/Species Diversity/Clean Run/'),\n       setwd('C:/Users/goring/Dropbox/Species Diversity/Clean Run'))\n\nif(.Platform$OS.type == 'unix')    source('../../Chapter Four - Regional Climate Reconstruction/Regional Maps/OpenMPD.r')\nif(.Platform$OS.type == 'windows') source('../../../Documents/SFU Documents/Thesis/Chapter Four - Regional Climate Reconstruction/Regional Maps/OpenMPD.r')\n\n################################################################################\n#  Files to load:\npresence <-    read.csv('CleanedPresAbs.csv', row.names=1)\nenv <-         read.csv('ExportEnv.csv', row.names=1)\npl.clim <-     read.csv('BCEnv_Normal_1961_1990Y.csv', row.names=1)\npl.clim <-     pl.clim[!is.na(pl.clim[,2]), -1]\n\npollen.set <-  read.csv('taxon.table.pollenequiv.csv',\n                        stringsAsFactors = FALSE, sep='\\t', row.names=1)\n\n#  Maps for overlay\ncanada <- readOGR(dsn = 'Maps', layer = 'PROVINCE')\nusa    <- readOGR(dsn = 'Maps', layer = 'us')\n\n################################################################################\n#  Get the spatial data for the presece/absence data, and clean the data up:\ncoordinates <- data.frame(long = -(env$LongitudeDegrees + \n                                     (env$LongitudeMinutes + env$LongitudeSeconds/60)/60),\n                          lat = env$LatitudeDegrees + (env$LatitudeMinutes + env$LatitudeSeconds/60)/60,\n                          elev = env$Elevation)\nrownames(coordinates) <- rownames(env)\n\n#  Some sites have no coordinates.\ngood.coord <- (rowSums(is.na(coordinates)) == 0)\ngood.sites <- rownames(presence)[rownames(presence) %in% rownames(env)[good.coord]]\ngooders <- match(good.sites, rownames(presence))\n\n#  Clean and project coordinates:\ncoordinates <- coordinates[good.sites,]\nenv <- env[good.sites,]\npresence <- presence[good.sites,]\npresence <- presence[,colSums(presence) > 0]\n\n#  Get pollen data (the loading of these files happens in getPolClim).\nmpd <- getPolClim(pct.fix = FALSE)\npol <- mpd[[1]]\nclim <- mpd[[2]]\nlocs <- mpd[[3]]\n\nnon.pollen <- c('BOTRYCHIUM', 'EQUISETU', 'LYCOPODX', 'OSMUNDACEA',\n                'POLYPOD', 'PTERIDIUM', 'SELAGINE', 'SPHAGNUM')\npol <- pol[, !colnames(pol) %in% non.pollen]\n\n#  Turn the point locations into spatial points, then transform them into a\n#  metric projection (BC Albers).\ncoord.pts <- SpatialPoints(coords = coordinates[,1:2], proj4string=CRS('+proj=longlat +ellps=WGS84'))\ncoord.pol <- SpatialPoints(coords = locs[,1:2], , proj4string=CRS('+proj=longlat +ellps=WGS84'))\n\ncpts.met <- coordinates(spTransform(coord.pts, CRS('+proj=aea +lat_1=50.0 +lat_2=58.5 +lat_0=45.0 +lon_0=-126.0  \n+x_0=1000000.0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs')))\ncpol.met <- coordinates(spTransform(coord.pol, CRS('+proj=aea +lat_1=50.0 +lat_2=58.5 +lat_0=45.0 +lon_0=-126.0  \n+x_0=1000000.0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs')))\n\n###########################################################################################\n#\n#  Effects of morphology:\n#\n#  Looking for congeners:\n\ngood.taxa <- match(pollen.set$spec.code, colnames(presence))\nplant.set <- pollen.set[!is.na(good.taxa),]\nplant.set <- plant.set[match(plant.set$spec.code, colnames(presence)),]\n\nget.agg.pres <- function(x){\n  agg <- aggregate(t(presence), by = list(x), sum)\n  agg.out <- t(agg)\n  colnames(agg.out) <- agg.out[1,]\n  agg.out <- agg.out[-1,]\n  apply(agg.out, 2, as.numeric)\n}\n\ngenus <- get.agg.pres(plant.set$genus)\nfamily <- get.agg.pres(plant.set$family)\n\ncongeners <- colSums(genus > 1)\nno.genus  <- table(plant.set$genus)\nanova(glm(congeners ~ no.genus, family = poisson), test = 'Chisq')\n\nconfam <- colSums(family > 1)\nno.fam <- table(plant.set$family)\nanova(glm(confam ~ no.fam, family = poisson), test = 'Chisq')\n\n#  These files are derived, so run the source if they don't exist, otherwise\n#  create the files de novo:\ntest.file <- function(x, y){\n  if(!(x %in% list.files('RichnessCSVs/'))){\n    source(y)\n  }\n  \n  z <- read.csv(paste('RichnessCSVs/',x, sep=''),row.names=1)\n  \n  z\n}\n\np.set <- pollen.set[match(colnames(presence), pollen.set$spec.code),]\n\npres.sp <- rowSums(presence)\n#pres.ge <- t(aggregate(t(as.matrix(presence)) ~ p.set$genus, FUN=sum)[-1,])\n#pres.fa <- aggregate(t(as.matrix(presence)) ~ p.set$family, FUN=sum)\npres.ge <- test.file('pres.ge.csv', 'make.genera.R')\npres.fa <- test.file('pres.fa.csv', 'make.family.R')\n\n#  Woody conversions\npres.w.fa <- test.file('pres.w.fa.csv', 'make.w.family.R')\npres.w.ge <- test.file('pres.w.ge.csv', 'make.w.genus.R')\npres.w.sp <- rowSums(presence[,pollen.set$set[match(colnames(presence), pollen.set$spec.code)]])\n\n#  Pollen conversions\npres.p.ge <- test.file('pres.p.ge.csv', 'make.pp.genera.R')\npres.p.fa <- test.file('pres.p.fa.csv', 'make.pp.family.R')\n\n#  Woody pollen conversions\npres.p.w.ge <- test.file('pres.p.w.ge.csv', 'make.pp.w.genera.R')\npres.p.w.fa <- test.file('pres.p.w.fa.csv', 'make.pp.w.family.R')\n\npol.ge  <- test.file('pol.ge.csv', 'make.pol.ge.R')\npol.fa  <- test.file('pol.fa.csv', 'make.pol.fa.R')\npol.w.ge <- test.file('pol.w.ge.csv', 'make.pol.w.ge.R')\npol.w.fa <- test.file('pol.w.fa.csv', 'make.pol.w.fa.R')\n\n#  Richness estimates are all calculated.\n################################################################################\n\nplants <-     data.frame(x = jitter(cpts.met[, 1]),\n                         y = jitter(cpts.met[, 2]),\n                         z = coordinates$elev * 100,\n                         pres.sp,\n                         pres.ge = rowSums(pres.ge[gooders, ]>0, na.rm=T),\n                         pres.fa = rowSums(pres.fa[gooders, ]>0, na.rm=T),\n                         pres.w.sp,\n                         pres.w.ge = rowSums(pres.w.ge[gooders, ]>0, na.rm=T),\n                         pres.w.fa = rowSums(pres.w.fa[gooders, ]>0, na.rm=T),\n                         pres.p.ge = rowSums(pres.p.ge[gooders, ]>0, na.rm=T),\n                         pres.p.fa = rowSums(pres.p.fa[gooders, ]>0, na.rm=T),\n                         pres.p.w.ge = rowSums(pres.p.w.ge[gooders, ]>0, na.rm=T),\n                         pres.p.w.fa = rowSums(pres.p.w.fa[gooders, ]>0, na.rm=T))\n\npollen <- data.frame(x = cpol.met[,1],\n                     y = cpol.met[,2],\n                     z = locs$Elevation,\n                     pol.ge = rowSums(pol.ge > 0),\n                     pol.fa = rowSums(pol.fa > 0),\n                     pol.w.ge = rowSums(pol.w.ge > 0),\n                     pol.w.fa = rowSums(pol.w.fa > 0),\n                     rar.ge = rarefy(floor(pol.ge), 300),\n                     rar.fa = rarefy(floor(pol.fa), 300))\n\n#\n################################################################################\n#  Pollen diversity against the rarified values.\n#\n\ncor.test(pollen$pol.ge, rarefy(floor(pol.ge), 200))\ncor.test(pollen$pol.ge, rarefy(floor(pol.ge), 300))\ncor.test(pollen$pol.ge, rarefy(floor(pol.fa), 200))\ncor.test(pollen$pol.ge, rarefy(floor(pol.fa), 300))\n#\n################################################################################\n#  Spatial models of variability:\n#  First we need to build the models:\nplant.models <- list()\n\nset <- c(4, 7, 10, 12)\n\nfor(i in 1:4){\n  plant.models[[i]] <- gam(formula(paste(colnames(plants)[set[i]], \n                                         '~ s(x, y, I(z*100))', sep='')),\n                           knots = list(x = seq(551561, 1861700, by = 50000),\n                                        y = seq(364400, 1736700, by = 50000),\n                                        z = seq(0, 2700, length.out = 50)),\n                           data=plants, family = poisson)\n                         #  corr = corSpher(value=c(63, 426000), nugget = TRUE))#, family=poisson)\n  \n  names(plant.models)[set[i]] <- colnames(plant.models)[set[i]]\n  cat ('.')\n}\n\n\n#  Then generate the rasters for the gridded predictions:\nbase.rast <- raster(xmx=-114, xmn=-134, ymx=61, ymn=48, nrows=54, ncols=82,\n                    crs=CRS('+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0'))\n\nbase.prj <- projectRaster(from=base.rast,\n              crs='+proj=aea +lat_1=50.0 +lat_2=58.5 +lat_0=45.0 \n                              +lon_0=-126.0 +x_0=1000000.0 +y_0=0 \n                              +ellps=GRS80 +datum=NAD83 +units=m \n                              +no_defs')\n\nelev <- raster('BCElev.tif')\nelev.bc <- projectRaster(from = elev, \n                         crs='+proj=aea +lat_1=50.0 +lat_2=58.5 +lat_0=45.0 \n                              +lon_0=-126.0 +x_0=1000000.0 +y_0=0 \n                              +ellps=GRS80 +datum=NAD83 +units=m \n                              +no_defs', res=res(base.prj))\n\ncan.rast <- rasterize(x=canada, y=base.rast)\ncan.rast[!can.rast == 12] <- NA\ncan.bc <- projectRaster(from=can.rast, to = elev.bc)\nin.can <- !is.na(extract(can.bc, pollen[,1:2]))\n\noutput <- data.frame(xyFromCell(elev.bc, 1:ncell(elev.bc)), \n                     z = getValues(elev.bc)*100)\noutput <- output[!is.na(getValues(can.bc)),]\n\ncolnames(output)[1:2] <- c('x', 'y')\n\ngen.rast <- function(x){\n  out <- predict(x, newdata=output, type='response')\n  test.rast <- getValues(can.bc)\n  test.rast[!is.na(test.rast)] <- out\n  setValues(can.bc, test.rast)\n}\n\n#  There is a real edge effect in the splines.  I'm going to buffer plant plots\n#  to see if I can fix it:\nbuff <- buffer(rasterize(cpts.met, can.bc), width=100000)\n\ncoordinates(output) <- ~ x + y + z\ncoordinates(plants) <- ~ x + y + z\n\nkrige.out <- krige(pres.sp ~ 1, locations = plants, newdata = output)\n\nkrige.pred <- data.frame(coordinates(krige.out), pred = krige.out$var1.pred, nmin=10)\ncoordinates(krige.pred) <- ~x+y\nplot(rasterize(krige.pred, can.bc, field = 'pred'))\n\nrich.rasts <- llply(plant.models, gen.rast)\n\nmodel.tests <- function(model, sites){\n  predicted <- predict(model, newdata=data.frame(x = sites$x, y = sites$y, z = sites$z), type='response')\n}\n\ntest.plant <- matrix(ncol=4, nrow=nrow(plants))\ntest.pollen <- matrix(ncol=4, nrow=nrow(pollen))\n\n\nfor(i in 1:4) test.plant[,i] <- model.tests(plant.models[[i]], plants)\n\nfor(i in 1:4) test.pollen[,i] <- model.tests(plant.models[[i]], pollen)\n\npollen.spatial <- data.frame(test.pollen, pollen[,4:7])\ncolnames(pollen.spatial)[1:4] <- c('plant.sp', 'plant.w.sp', 'pol.plant', 'pol.w.plant')\n",
    "created" : 1366041058937.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2021121826",
    "id" : "AC71BB42",
    "lastKnownWriteTime" : 1366057842,
    "path" : "C:/Users/goring/Dropbox/Species Diversity/Clean Run/CleanDiversity.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}