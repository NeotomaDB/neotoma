source.with.encoding('~/GitHub/neotoma/R/base.functions.R', encoding='UTF-8')
get.contacts()
library(neotoma)
get.authors()
aa <- get.contacts()
library(neotoma)
aa <- get.contacts()
rm(list=ls())
aa <- get.contacts()
?get.contacts
active.cont <- get.contacts(contactstatus = 'active')
debug(get.contacts())
debug(get.contacts
)
active.cont <- get.contacts(contactstatus = 'active')
cl
cl
cl$contactstatus
class(cl$contactstatus)
q
Q
library(neotoma)
active.cont <- get.contacts(contactstatus = 'active')
library(neotoma)
active.cont <- get.contacts(contactstatus = 'active')
library(neotoma)
?get.contact
?get.contacts
library(neotoma)
?get.contacts
#  Open the vegetation data:
library(plyr)
library(mgcv)
library(rgdal)
library(vegan)
library(raster)
library(gstat)
library(nlme)
library(ggplot2)
#  Set the home folder and load the required files using an ifelse statement to
#  ensure that we can detect which computer I'm using.
ifelse(.Platform$OS.type == 'unix',
setwd('/home/simon/Dropbox/Species Diversity/Clean Run/'),
setwd('C:/Users/goring/Dropbox/Species Diversity/Clean Run'))
if(.Platform$OS.type == 'unix')    source('../../Chapter Four - Regional Climate Reconstruction/Regional Maps/OpenMPD.r')
if(.Platform$OS.type == 'windows') source('../../../Documents/SFU Documents/Thesis/Chapter Four - Regional Climate Reconstruction/Regional Maps/OpenMPD.r')
################################################################################
#  Files to load:
presence <-    read.csv('CleanedPresAbs.csv', row.names=1)
env <-         read.csv('ExportEnv.csv', row.names=1)
pl.clim <-     read.csv('BCEnv_Normal_1961_1990Y.csv', row.names=1)
pl.clim <-     pl.clim[!is.na(pl.clim[,2]), -1]
pollen.set <-  read.csv('taxon.table.pollenequiv.csv',
stringsAsFactors = FALSE, sep='\t', row.names=1)
#  Maps for overlay
canada <- readOGR(dsn = 'Maps', layer = 'PROVINCE')
usa    <- readOGR(dsn = 'Maps', layer = 'us')
################################################################################
#  Get the spatial data for the presece/absence data, and clean the data up:
coordinates <- data.frame(long = -(env$LongitudeDegrees +
(env$LongitudeMinutes + env$LongitudeSeconds/60)/60),
lat = env$LatitudeDegrees + (env$LatitudeMinutes + env$LatitudeSeconds/60)/60,
elev = env$Elevation)
rownames(coordinates) <- rownames(env)
#  Some sites have no coordinates.
good.coord <- (rowSums(is.na(coordinates)) == 0)
good.sites <- rownames(presence)[rownames(presence) %in% rownames(env)[good.coord]]
gooders <- match(good.sites, rownames(presence))
#  Clean and project coordinates:
coordinates <- coordinates[good.sites,]
env <- env[good.sites,]
presence <- presence[good.sites,]
presence <- presence[,colSums(presence) > 0]
#  Get pollen data (the loading of these files happens in getPolClim).
mpd <- getPolClim(pct.fix = FALSE)
pol <- mpd[[1]]
clim <- mpd[[2]]
locs <- mpd[[3]]
non.pollen <- c('BOTRYCHIUM', 'EQUISETU', 'LYCOPODX', 'OSMUNDACEA',
'POLYPOD', 'PTERIDIUM', 'SELAGINE', 'SPHAGNUM')
pol <- pol[, !colnames(pol) %in% non.pollen]
#  Turn the point locations into spatial points, then transform them into a
#  metric projection (BC Albers).
coord.pts <- SpatialPoints(coords = coordinates[,1:2], proj4string=CRS('+proj=longlat +ellps=WGS84'))
coord.pol <- SpatialPoints(coords = locs[,1:2], , proj4string=CRS('+proj=longlat +ellps=WGS84'))
cpts.met <- coordinates(spTransform(coord.pts, CRS('+proj=aea +lat_1=50.0 +lat_2=58.5 +lat_0=45.0 +lon_0=-126.0
+x_0=1000000.0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs')))
cpol.met <- coordinates(spTransform(coord.pol, CRS('+proj=aea +lat_1=50.0 +lat_2=58.5 +lat_0=45.0 +lon_0=-126.0
+x_0=1000000.0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs')))
###########################################################################################
#
#  Effects of morphology:
#
#  Looking for congeners:
good.taxa <- match(pollen.set$spec.code, colnames(presence))
plant.set <- pollen.set[!is.na(good.taxa),]
plant.set <- plant.set[match(plant.set$spec.code, colnames(presence)),]
get.agg.pres <- function(x){
agg <- aggregate(t(presence), by = list(x), sum)
agg.out <- t(agg)
colnames(agg.out) <- agg.out[1,]
agg.out <- agg.out[-1,]
apply(agg.out, 2, as.numeric)
}
genus <- get.agg.pres(plant.set$genus)
family <- get.agg.pres(plant.set$family)
congeners <- colSums(genus > 1)
no.genus  <- table(plant.set$genus)
anova(glm(congeners ~ no.genus, family = poisson), test = 'Chisq')
confam <- colSums(family > 1)
no.fam <- table(plant.set$family)
anova(glm(confam ~ no.fam, family = poisson), test = 'Chisq')
good.taxa <- match(pollen.set$spec.code, colnames(presence))
plant.set <- pollen.set[!is.na(good.taxa),]
plant.set <- plant.set[match(plant.set$spec.code, colnames(presence)),]
get.agg.pres <- function(x){
agg <- aggregate(t(presence), by = list(x), sum)
agg.out <- t(agg)
colnames(agg.out) <- agg.out[1,]
agg.out <- agg.out[-1,]
apply(agg.out, 2, as.numeric)
}
genus <- get.agg.pres(plant.set$genus)
family <- get.agg.pres(plant.set$family)
congeners <- colSums(genus > 1)
no.genus  <- table(plant.set$genus)
anova(glm(congeners ~ no.genus, family = poisson), test = 'Chisq')
confam <- colSums(family > 1)
no.fam <- table(plant.set$family)
anova(glm(confam ~ no.fam, family = poisson), test = 'Chisq')
#  These files are derived, so run the source if they don't exist, otherwise
#  create the files de novo:
test.file <- function(x, y){
if(!(x %in% list.files('RichnessCSVs/'))){
source(y)
}
z <- read.csv(paste('RichnessCSVs/',x, sep=''),row.names=1)
z
}
p.set <- pollen.set[match(colnames(presence), pollen.set$spec.code),]
pres.sp <- rowSums(presence)
#pres.ge <- t(aggregate(t(as.matrix(presence)) ~ p.set$genus, FUN=sum)[-1,])
#pres.fa <- aggregate(t(as.matrix(presence)) ~ p.set$family, FUN=sum)
pres.ge <- test.file('pres.ge.csv', 'make.genera.R')
pres.fa <- test.file('pres.fa.csv', 'make.family.R')
#  Woody conversions
pres.w.fa <- test.file('pres.w.fa.csv', 'make.w.family.R')
pres.w.ge <- test.file('pres.w.ge.csv', 'make.w.genus.R')
pres.w.sp <- rowSums(presence[,pollen.set$set[match(colnames(presence), pollen.set$spec.code)]])
#  Pollen conversions
pres.p.ge <- test.file('pres.p.ge.csv', 'make.pp.genera.R')
pres.p.fa <- test.file('pres.p.fa.csv', 'make.pp.family.R')
#  Woody pollen conversions
pres.p.w.ge <- test.file('pres.p.w.ge.csv', 'make.pp.w.genera.R')
pres.p.w.fa <- test.file('pres.p.w.fa.csv', 'make.pp.w.family.R')
pol.ge  <- test.file('pol.ge.csv', 'make.pol.ge.R')
pol.fa  <- test.file('pol.fa.csv', 'make.pol.fa.R')
pol.w.ge <- test.file('pol.w.ge.csv', 'make.pol.w.ge.R')
pol.w.fa <- test.file('pol.w.fa.csv', 'make.pol.w.fa.R')
#  Richness estimates are all calculated.
################################################################################
plants <-     data.frame(x = jitter(cpts.met[, 1]),
y = jitter(cpts.met[, 2]),
z = coordinates$elev * 100,
pres.sp,
pres.ge = rowSums(pres.ge[gooders, ]>0, na.rm=T),
pres.fa = rowSums(pres.fa[gooders, ]>0, na.rm=T),
pres.w.sp,
pres.w.ge = rowSums(pres.w.ge[gooders, ]>0, na.rm=T),
pres.w.fa = rowSums(pres.w.fa[gooders, ]>0, na.rm=T),
pres.p.ge = rowSums(pres.p.ge[gooders, ]>0, na.rm=T),
pres.p.fa = rowSums(pres.p.fa[gooders, ]>0, na.rm=T),
pres.p.w.ge = rowSums(pres.p.w.ge[gooders, ]>0, na.rm=T),
pres.p.w.fa = rowSums(pres.p.w.fa[gooders, ]>0, na.rm=T))
pollen <- data.frame(x = cpol.met[,1],
y = cpol.met[,2],
z = locs$Elevation,
pol.ge = rowSums(pol.ge > 0),
pol.fa = rowSums(pol.fa > 0),
pol.w.ge = rowSums(pol.w.ge > 0),
pol.w.fa = rowSums(pol.w.fa > 0),
rar.ge = rarefy(floor(pol.ge), 200),
rar.fa = rarefy(floor(pol.fa), 200))
#
################################################################################
#  Pollen diversity against the rarified values.
cor.test(pollen$pol.ge, pollen$rar.ge)
cor.test(pollen$pol.fa, pollen$rar.fa)
pollen <- data.frame(x = cpol.met[,1],
y = cpol.met[,2],
z = locs$Elevation,
pol.ge = rowSums(pol.ge > 0),
pol.fa = rowSums(pol.fa > 0),
pol.w.ge = rowSums(pol.w.ge > 0),
pol.w.fa = rowSums(pol.w.fa > 0),
rar.ge = rarefy(floor(pol.ge), 300),
rar.fa = rarefy(floor(pol.fa), 300))
cor.test(pollen$pol.ge, pollen$rar.ge)
cor.test(pollen$pol.fa, pollen$rar.fa)
cor.test(pollen$pol.ge, rarefy(floor(pol.ge), 200))
cor.test(pollen$pol.ge, rarefy(floor(pol.ge), 300))
diff( c(0.9067419, 0.9322662) )/2
diff( c(0.9364242, 0.9540205 ) )/2
cor.test(pollen$pol.ge, rarefy(floor(pol.fa), 200))
cor.test(pollen$pol.ge, rarefy(floor(pol.fa), 300))
diff( c(0.7730631,0.8319501 ) )/2
diff( c(0.8236786, 0.8703917  ) )/2
levels(pollen.set$PollenType)
table(pollen.set$PollenType)
pol
pol$ASTERX
colnames(pol)
mpd <- getPolClim(pct.fix = FALSE)
pol <- mpd[[1]]
colnames(pol)
debug(getPolClim)
mpd <- getPolClim(pct.fix = FALSE)
FullTable
write.csv(FullTable, 'fullpol.test.csv')
aa <- FullTable
Q
aa
getwd()
